<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.dodam.hotel.repository.interfaces.UserRepository">

	<resultMap type="com.dodam.hotel.repository.model.User"
		id="User">
		<result column="id" property="id" />
		<result column="email" property="email" />
		<result column="password" property="password" />
		<result column="name" property="name" />
		<result column="gender" property="gender" />
		<result column="birth" property="birth" />
		<result column="tel" property="tel" />
		<result column="address" property="address" />
		<result column="blacklist" property="blacklist" />
		<result column="withdrawal" property="withdrawal" />
		<result column="origin_email" property="originEmail" />
		<result column="created_at" property="createdAt" />
		<result column="social_login" property="socialLogin" />
		<result column="random_pwd_status" property="randomPwdStatus" />
	</resultMap>

	<!-- 로그인 용도 user select -->
	<select id="findUserByLoginFormDto"
		resultType="com.dodam.hotel.dto.UserResponseDto$LoginResponseDto">
		select *
		from user_tb
		where email = #{email}
	</select>

	<!-- 재가입 유저 조회 -->
	<select id="findUserByOriginEmail" resultMap="User">
		select *
		from
		user_tb
		where origin_email = #{email}
	</select>

	<!-- 마이페이지 정보 수정 -->
	<update id="updateUserByEmail">
		update user_tb
		set password = #{password}, tel =
		#{tel}
		where email = #{email}
	</update>

	<!-- 회원 탈퇴 update -->
	<update id="deleteUser">
		update user_tb
		set email = #{email}, origin_email = #{originEmail}, withdrawal = 1
		where id = #{id};
	</update>

	<!-- 재가입용 update -->
	<update id="updateUserByOriginEmail">
		update user_tb
		set email = #{email}, password =
		#{password}, name = #{name}, gender = #{gender},
		birth = #{birth}, tel = #{tel}, address = #{address}, withdrawal = 0
		where
		origin_email = #{email}
	</update>

	<!-- email로 특정 유저 조회 -->
	<select id="findUserByEmail" resultMap="User">
		select *
		from user_tb
		where email = #{email}
	</select>

	<!-- email로 카카오 유저 조회 -->
	<select id="findUserKakao"
		resultType="com.dodam.hotel.dto.UserResponseDto$LoginResponseDto">
		select *
		from user_tb
		where email = #{email}
	</select>

	<!-- 회원가입 -->
	<insert id="insert">
		INSERT INTO user_tb (email, password, name, gender, birth, tel, address)
		VALUES (#{email}, #{password}, #{name}, #{gender}, #{birth}, #{tel},
		#{address})
	</insert>

	<!-- 카카오 회원가입 -->
	<insert id="insertKakao">
		INSERT INTO user_tb (email, password, name, gender, birth, tel,
		social_login)
		VALUES (#{email}, #{password}, #{name}, #{gender}, #{birth}, #{tel}, 1)
	</insert>

	<!-- 제일 최근 가입 회원 조회 -->
	<select id="findIdOrderById" resultType="integer">
		SELECT id FROM user_tb
		where email=#{email} and password=#{password} and name=#{name} and
		gender=#{gender} and
		birth=#{birth} and tel=#{tel}
	</select>

	<!-- 오늘 회원가입 회원 조회 -->
	<select id="findUserToday"
		resultType="com.dodam.hotel.repository.model.User">
		select * from user_tb
		where date_format(created_at,
		"%Y-%m-%d") = curdate()
	</select>

	<!-- id 찾기 -->
	<select id="findUserForIdInquiry" resultMap="User">
		select email, name
		from user_tb
		where name=#{name} and birth=#{birth} and tel=#{tel}
	</select>

	<!-- 임시 비밀번호 발급 -->
	<update id="updatePwByUserInfo">
		update user_tb
		set password = #{password},
		random_pwd_status = true
		where name=#{name} and birth=#{birth} and
		tel=#{tel} and email=#{email}
	</update>

	<!-- 비밀번호 변경 페이지에서 비밀번호 변경 -->
	<update id="updateOnlyPw">
		update user_tb
		set password = #{password}
		where id =
		#{userId}
	</update>

	<!-- 임시 비밀번호 발급 여부 변경 -->
	<update id="updatePwdStatus">
		update user_tb
		set random_pwd_status = false
		where id =
		#{id}
	</update>

</mapper>
